/* ------------ 网页整体设置 ------------ */

/* 首先把盒模型设为 border-box，避免溢出。 */
html {
  box-sizing: border-box;
}

*, *::before, *::after {
  box-sizing: inherit;
}

body {
  /* margin 设为 0，从而可以让背景色铺满整个网页 */
  margin: 0;
  height: 100vh;
  background: #bababa;
  color: #bababa;
  font-family: '黑体', sans-serif;
  line-height: 1.5;
  text-align: center;
  /* 弹性盒子布局 */
  display: flex;
  flex-wrap: wrap;
  /* 多行垂直等距分布 */
  align-content: space-evenly;
  /* 水平等距分布 */
  justify-content: space-evenly;
  /* 行内垂直对齐 */
  align-items: center;
}

/* ------------ 控制部分 ------------ */

#control {
  position: relative;
  /* background-color: blue; */
  width: 20%;
  font-size: 1.5rem;
}

/* 利用 margin-top 属性，实现盒子特定的宽高比 */
#control::after {
  content: "";
  display: block;
  margin-top: calc(270 / 160 * 100%);
}

.parameter {
  display: flex;
  flex-wrap: wrap;
  align-content: space-between;
  /* 因为父容器利用伪元素撑起盒子，实现特定宽高比，所以这里要设为绝对定位，
  让其脱离正常文档流，也就是浮在那个撑起盒子高度的伪元素上面 */
  position: absolute;
  width: 100%;
  height: 100%;
}

/* 参数名 */
.parameter>div:nth-child(2n+1) {
  width: 50%;
  border-radius: 0.5rem 0 0 0.5rem;
  background-color: black;
  border-right: solid 1px #bababa;
}

/* 参数值 */
.parameter>input:nth-child(2n+2), .parameter>button {
  display: block;
  margin: 0;
  padding: 0;
  border: none;
  width: 50%;
  border-radius: 0 0.5rem 0.5rem 0;
  background-color: black;
  /* 字体部分 */
  font-size: inherit;
  line-height: inherit;
  text-align: inherit;
  color: inherit;
}

/* 按钮 */
.parameter>button {
  width: 100%;
  border-radius: 0.5rem;
  background-color: #60c250;
  color: white;

}

button img {
  width: 1.5rem;
  vertical-align: middle;
  margin-left: 1rem;
}

/* ------------ 计时器 ------------ */

#timer {
  position: relative;
  width: 60%;
  background-color: black;
  border-radius: 0.5rem;
}

/* 利用 margin-top 属性，实现盒子特定的宽高比 */
#timer::after {
  content: "";
  display: block;
  margin-top: calc(270 / 480 * 100%);
}

#score-board {
  display: flex;
  justify-content: center;
  align-items: center;
  /* 因为父容器利用伪元素撑起盒子，实现特定宽高比，所以这里要设为绝对定位，
  让其脱离正常文档流，也就是浮在那个撑起盒子高度的伪元素上面 */
  position: absolute;
  width: 100%;
  height: 100%;
}

/* 分钟框，秒钟框，利用伪元素撑起为正方形 */
#minute, #second {
  position: relative;
  width: calc(200 / 480 * 100%);
  margin: calc(5 / 480 * 100%);
}

#minute::after, #second::after {
  content: "";
  display: block;
  margin-top: 100%;
}

/* 上部、下部计数板，各占据半个正方形 */
.upper, .lower {
  position: absolute;
  width: 100%;
  height: 50%;
  background-color: #212121;
  overflow: hidden;
}

.upper {
  top: 0;
  border-bottom: solid black 0.2rem;
  border-radius: 0.5rem 0.5rem 0 0;
}

.lower {
  bottom: 0;
  border-top: solid black 0.2rem;
  border-radius: 0 0 0.5rem 0.5rem;
}

/* 数字 svg 图的尺寸与定位 */
.upper img, .lower img {
  display: block;
  position: absolute;
  width: 100%;
  height: auto;
}

.upper img {
  top: 0;
}

.lower img {
  bottom: 0;
}

/* ------------ 动画 ------------ */

/* 思路是，复制上部牌子与下部牌子，合成动态翻转的牌子。
一开始，复制的下部牌子要翻转到上部，并被复制的上部牌子盖住 */

.upper-animate, .lower-animate {
  /* 动画时间 */
  animation-duration: 0.5s;
  /* 匀速动画 */
  animation-timing-function: linear;
  /* 背部不可见 */
  backface-visibility: hidden;
}

/* 复制的上部牌子，翻到下部 */
.upper-animate {
  /* 动画名（后面需要自定义这个动画名的动作） */
  animation-name: upper-to-lower;
  /* 转动轴 */
  transform-origin: bottom;
}

@keyframes upper-to-lower {
  from {
    transform: rotateX(0deg);
  }

  to {
    transform: rotateX(180deg);
  }
}

/* 复制的下部牌子，的初始位置 */
.lower-animate-initial {
  /* 转动轴 */
  transform-origin: top;
  transform: rotateX(-180deg);
  z-index: 1;
}

/* 复制的下部牌子，翻到下部 */
.lower-animate {
  /* 动画名（后面需要自定义这个动画名的动作） */
  animation-name: lower-to-lower;
  /* 转动轴 */
  transform-origin: top;
}

@keyframes lower-to-lower {
  from {
    transform: rotateX(-180deg);
  }

  to {
    transform: rotateX(0deg);
  }
}

/* ------------ 竖屏时的样式 ------------ */

@media (orientation: portrait) {
  #control {
    width: 95%;
    height: 18rem;
  }

  #timer {
    width: 95%;
  }
}